CS5001
HW 6: Othello Design
Evan Douglass

========== MAIN DATA STRUCTURES ==========

In the GameBoard class there will be a list used to represent the current state 
of the Othello board. It will contain the values None or a Gamepiece object 
depending on whether the square contains a tile or not. The list will have a 
length of n*n, where n is the number of squares on one side of the board. Each 
index represents one square on the board, from 0 on the bottom left to n*n on 
the upper right, increasing left to right, bottom to top.

There will be another list in GameBoard containing Square objects. This is 
initialized when the game board is drawn and is used to determine if one of 
the squares was clicked on, so a tile can be drawn there.

========== /MAIN DATA STRUCTURES ==========

========== MODULE CONSTANTS AND GLOBAL VARIABLES ==========

* int SQUARE -- The size of one square on the board.
* int RADIUS -- The radius of each tile.
* Screen window -- The window that contains the game.
* Turtle othello -- Used for drawing in the window.

========== /MODULE CONSTANTS ==========

========== CLASSES ==========

Name: GameBoard
Purpose:
    GameBoard represents a board of the game Othello. It also contains all the functions to execute game logic.

Constants:
    *

Variables: 
    * int size -- The length of one side of the board.
    * str turn -- Contains the values "white" or "black" depending on whos turn it is. Initializes to black; the user will go first.
    * Gamepiece[] pieces -- A list of the contents of each square on the board. Either a Gampiece object or None for empty squares.
    * Square[] squares -- A list of each square on the board.

Methods:
    draw_board(self, n)
        Draws an nxn board with a green background.
        int n -- The number of squares on one side of the board.

        Set up Screen
        Set up Turtle
        Set black lines and green background
        Set turtle in lower left corner
        Draw background
        Draw lines
    
    draw_lines(self, turt, n)
        Draws a line the length of the board. A helper function for draw_board.
        Turtle turt -- A Turtle object.
        int n -- The number of squares to draw on the board in one direction.

        Draw a line the length of n squares

    find_center_squares(self, n)
        Finds the four center starting squares on the board.
        int n -- The number of squares on one side of the board. Must be even.
        Returns a tuple of ints representing the indexes of the four center squares on the draw_board.

        # If n is even and the board grid is indexed from 0 to n*n
        # then the upper right center square can be found with the formula:
        # 0.5(n**2 + n)
        # I worked this out on paper myself.
        # The remaining squares can be found by subtracting from that result:
        # 1, n, n+1 for upper left, lower right, and lower left respectively
        ur = 0.5(n**2 + n)
        ul = ur - 1
        lr = ur - n
        ll = lr - 1
        return (ur, ul, lr, ll)

    place(self, location, color)
        Initializes a Gamepiece object on the Othello board at the given location and with the given color.
        int location -- An index representing a square on the board (0 to n*n).
        str color -- The color of the piece being placed.

        Initialize a Gamepiece object with location and color
        Add to self.board in location
        Draw piece on the board with Gamepiece.draw_tile
        (Use in onclick Screen method?)

    get_location(self, mouse_x, mouse_y)
        Gets board square location data based on the coordinates of a mouse click.
        int mouse_x -- x coordinate of the mouse
        int mouse_y -- y coordinate of the mouse
        Returns an int[] where index 0 represents the board square that was clicked in and indices 1 & 2 are the x and y-coordinates of the square's center. Does nothing if the click is outside of the board area.

        Increase x and y to account for board vs screen size

    is_valid_move(self)

    count_tiles(self)

    flip_tiles(self, location_list)

==========

Name: Square
Purpose:
    Square represents the area of one square on the Othello board.
Constants:
    * 

Variables:
    * int index -- A unique integer identifying the square.
    * int size -- The legth of one side of the square.
    * int x -- The lower left x-coordinate of the square.
    * int y -- The lower left y-coordinate of the square.
    * int[] center -- The (x, y) coordinates of the square's center.

Methods:
    __init__(self, index, x, y)
        assign variables
        calculate center

    calc_center(self)
        Finds the coordinates of the square's center.
        Returns a tuple containing the coordinates.

        center x is (x+length) - length//2
        center y is (y+length) - length//2
        return (x, y)

    was_clicked(self, x, y)
        Determines if this square was clicked on by the user.
        int x -- The x-coordinate of a mouse click.
        int y -- The y-coordinate of a mouse click.
        Returns a boolean value.

        if self.x <= x <= self.x + size
        and self.y <= y <= self.y + size
           then return True
        else return False

==========

Name: Gamepiece
Purpose:
    Gamepiece represents a single playing piece in Othello.
Constants:
    * 
Variables:
    * str color -- The color that is currently showing on the board. Can be white or black.
    * int location -- An index representing a square on the Othello board (0 to n*n).
Methods:
    __init__(self, location, color)

    flip(self)
        If the piece is white, changes it to black. If the piece is black, changes it to white.
        Nothing returned
        
        if self.color is white 
            self.color = black
        elif self.color is black
            self.color = white
        Redraw the tile with its new color (draw_tile)
    
    draw_tile(self, turt, color, x, y)
        Draws an Othello piece on the game board using the provided Turtle object.
        Turtle turt -- A Turtle object to draw on the board.
        str color -- The color of the piece being placed.
        int x -- The x coordinate of the center of the tile
        int y -- The y coordinate of the center of the tile
        Nothing returned

        Raise turt
        Move turt to center_x, center_y
        Lower turt
        Set fill color to color
        turt.circle(radius)

========== /CLASSES ==========

========== Main ==========

* Initialize the game board and set turn to be the user's (board = GameBoard(8))
* search for all valid moves
* while the board is not full and there are valid moves
    * if it's the user's turn
        * wait for click
            * if click is on the board and in a valid location
                * place a black tile in that square
                * flip all white tiles between the new tile and any other black tiles
                * change turns
    * elif it's the computer's turn
        * for each valid move
            * find the largest number of tiles that can be flipped from there
        * place a white tile in the location that will flip the largest number of tiles
        * flip the tiles
        * change turns
    * else
        * do nothing if it's the user's turn and there is not a valid click
    * search for all valid moves
* count the number of black and white tiles on the board
* if there are more black tiles
    * user wins, display "you win" message
* else
    * computer wins, display "you lose" message
* turtle.done()             

========== /Main ==========